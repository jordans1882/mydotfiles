# {{{ Document Info
# Author: Jordan Schupbach
# Date: 12/06/2017
# Purpose: My tmux config file
# TODO:
#  - Integrate Current Task Info into command
#  - Try to change modifier to ctrl-a
# }}} Document Info
# {{{ List of plugins
# {{{ tpm examples for plugins
# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com/user/plugin'
# set -g @plugin 'git@bitbucket.com/user/plugin'
# }}} tpm examples for plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
# set -g @plugin 'jordans1882/tmux-powerline'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-sidebar'
set -g @plugin 'tmux-plugins/tmux-sidebar'
# }}} List of plugins
# {{{ Status-bar options
set-option -g status on
set-option -g status-interval 1
set-option -g status-justify "centre"
set-option -g status-left-length 60
set-option -g status-right-length 90
#set-option -g status-left "#(~/.tmux/plugins/tmux-powerline/powerline.sh left)"
#set-option -g status-right "#(~/.tmux/plugins/tmux-powerline/powerline.sh right)"
# }}} Status-bar options
# {{{ Basic Settings

# {{{ Global Options
# Use vim keybindings in copy mode
#setw -g mode-keys vi
# vi-style controls in copy mode
set-option -g status-keys vi
set-window-option -g mode-keys vi


#bind-key -t vi-copy 'v' begin-selection
#bind-key -t vi-copy 'y' copy-selection

## Bind `v` to trigger selection    
#bind-key -T copy-mode-vi v send-keys -X begin-selection

## Bind `y` to yank current selection
#bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel

## Rebind `mouse click + drag button release` to not jump away from context
#bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-selection

# Change prefix to C-a instead of C-b
set -g prefix C-a
unbind-key C-b
bind-key C-a send-prefix

# large history
set-option -g history-limit 10000

# Set terminal to default X terminal
set -g default-terminal "xterm"
# Luke's setup
# set-option -g default-terminal "screen-256color" #"xterm-256color" # "screen-256color"

# Set statusbar colors (redundant?)
set -g status-bg colour239
set -g status-fg colour222
set-option -g pane-active-border-fg blue
# set -g status-attr colour100

# Turn on mouse capabilities
set -g mouse on

# basic settings
set-window-option -g xterm-keys on # for vim
set-window-option -g mode-keys vi # vi key
set-window-option -g monitor-activity on
set-window-option -g window-status-activity-style bg=colour204,fg=colour235 # Do I want this (seems to be on a lot)
set-window-option -g window-status-bell-style bg=colour204,fg=colour235 #
set-window-option -g window-status-current-style bg=colour235,fg=colour78 #bg and fg are switched?
set-window-option -g window-status-last-style bg=colour238,fg=colour247
set-window-option -g window-status-style bg=colour236,fg=colour247
#set-window-option -g window-active-style bg=colour235,fg=colour39
#set-window-option -g window-style bg=colour233,fg=colour39
setw -g window-status-current-attr reverse

# Automatically set window title
setw -g automatic-rename
# }}} Global Options
# {{{ Bindings

# {{{ General
# reload tmux conf
bind-key r source-file ~/.tmux.conf

#bind Escape copy-mode
# }}} General
# {{{ Panes
# new split in current pane (horizontal / vertical)
bind-key _ split-window -v # split pane horizontally
bind-key | split-window -h # split pane vertically

# list panes
bind-key Space list-panes

# break-pane
bind-key Enter break-pane

# join-pane [-dhv] [-l size | -p percentage] [-s src-pane]
bind-key Space command-prompt "joinp -t:%%" # %% = prompt for window.pane [-V|H] # vert|hor split

#previous pane
bind-key -n C-up prev
bind-key -n C-left prev

#next pane
bind-key -n C-right next
bind-key -n C-down next
# }}} Panes
# {{{ windows
bind c new-window
bind C-j previous-window
bind C-k next-window
bind-key C-a last-window # C-a C-a for last active window
bind A command-prompt "rename-window %%"
# By default, all windows in a session are constrained to the size of the
# smallest client connected to that session,
# even if both clients are looking at different windows.
# It seems that in this particular case, Screen has the better default
# where a window is only constrained in size if a smaller client
# is actively looking at it.
setw -g aggressive-resize on
# }}} windows
# {{{ panes

# Navigation
# use the vim motion keys to move between panes
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# Resizing
bind-key C-h resize-pane -L
bind-key C-j resize-pane -D
bind-key C-k resize-pane -U
bind-key C-l resize-pane -R

# }}} panes
# {{{ layouts
bind o select-layout "active-only"
bind M-- select-layout "even-vertical"
bind M-| select-layout "even-horizontal"
bind M-r rotate-window
# }}} layouts
# {{{ User Defined Keybindings
# bind C-b Shift+a resize-pane -t 1 -y 5
# set to main-horizontal, 60% height for main pane
bind m set-window-option main-pane-height 27\; select-layout main-horizontal

bind o run-shell "thyme -d"
bind O run-shell "thyme --stop"
bind b run-shell "thyme -bd"

# }}} User Defined Keybindings

# }}} Bindings

# }}} Basic Settings
# {{{ Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
# run-shell ~/git_repos/tmux-resurrect/resurrect.tmux
run '~/.tmux/plugins/tpm/tpm'
# }}} Initialize tpm

